import unittest
from unittest.mock import patch, MagicMock
from flask import session, url_for
from flaskr.app import create_app
# from flaskr.app.mainFlaskapp import get_db
# import apps 
# from app.mainFlaskapp import get_db
# from app.db import get_db
# from flaskr import create_app  # Import create_app from the flaskr package
# from flaskr.app.db import get_db
from werkzeug.security import generate_password_hash
from . import auth
class AuthTestCase(unittest.TestCase):

    def setUp(self):
        """Set up test variables and initialize the test client."""
        self.app = app
        self.client = self.app.test_client()
        self.app.config['TESTING'] = True
        self.app.config['WTF_CSRF_ENABLED'] = False
        self.mock_db = patch('app.db.get_db').start()

    def tearDown(self):
        """Tear down test variables and stop the mock."""
        patch.stopall()

    # Test successful registration
    def test_register_success(self):
        # Set up mock to simulate database cursor
        mock_cursor = MagicMock()
        self.mock_db.return_value.cursor.return_value = mock_cursor
        mock_cursor.fetchone.return_value = None

        # Form data to simulate registration
        data = {
            'student_name': 'John Doe',
            'student_password': 'password123',
            'matric_number': '202312345',
            'student_level': '100',
            'student_state': 'Lagos',
            'email': 'johndoe@example.com',
            'programme_type': 'Full-Time',
            'department': 'Computer Science',
            'local_government': 'Epe',
            'phone_number': '08012345678',
            'year_of_admission': '2023',
            'faculty': 'Engineering',
            'programme': 'BSc Computer Science'
        }

        response = self.client.post('/auth/register', data=data, follow_redirects=True)
        self.assertEqual(response.status_code, 200)  # Check redirect to login page
        self.assertIn(b'Login', response.data)  # Ensure login page is displayed

    # Test registration with missing data
    def test_register_missing_data(self):
        data = {
            'student_name': '',  # Missing name
            'student_password': 'password123'
        }
        response = self.client.post('/auth/register', data=data)
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Name is required.', response.data)  # Check error message

    # Test successful login
    def test_login_success(self):
        mock_cursor = MagicMock()
        self.mock_db.return_value.cursor.return_value = mock_cursor

        user = {
            'student_id': 1,
            'student_name': 'John Doe',
            'student_password': generate_password_hash('password123'),
            'matric_number': '202312345'
        }
        mock_cursor.fetchone.return_value = user

        data = {
            'matric_number': user['matric_number'],
            'student_password': 'password123'
        }

        with self.client as client:
            response = client.post('/auth/login', data=data, follow_redirects=True)
            self.assertEqual(response.status_code, 200)
            self.assertIn(b'Index', response.data)  # Check redirect to index page
            self.assertEqual(session['user_id'], user['student_id'])

    # Test login with incorrect password
    def test_login_incorrect_password(self):
        mock_cursor = MagicMock()
        self.mock_db.return_value.cursor.return_value = mock_cursor

        user = {
            'student_id': 1,
            'student_name': 'John Doe',
            'student_password': generate_password_hash('password123'),
            'matric_number': '202312345'
        }
        mock_cursor.fetchone.return_value = user

        data = {
            'matric_number': user['matric_number'],
            'student_password': 'wrongpassword'
        }

        response = self.client.post('/auth/login', data=data)
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Incorrect password.', response.data)  # Check error message

    # Test login with non-existent matric number
    def test_login_non_existent_matric(self):
        mock_cursor = MagicMock()
        self.mock_db.return_value.cursor.return_value = mock_cursor
        mock_cursor.fetchone.return_value = None  # No user found

        data = {
            'matric_number': 'unknown_matric',
            'student_password': 'password123'
        }

        response = self.client.post('/auth/login', data=data)
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Incorrect matric number.', response.data)  # Check error message

if __name__ == '__main__':
    unittest.main()
